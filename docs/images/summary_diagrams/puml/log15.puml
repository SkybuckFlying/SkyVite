@startuml
namespace log15 {
    class Ctx << (S,Aquamarine) >> {
        - toArray() []<font color=blue>interface</font>{}

    }
    interface Format  {
        + Format(r *Record) []byte

    }
    interface Handler  {
        + Log(r *Record) error

    }
    class Lazy << (S,Aquamarine) >> {
        + Fn <font color=blue>interface</font>{}

    }
    interface Logger  {
        + New(ctx ...<font color=blue>interface</font>{}) Logger
        + GetHandler() Handler
        + SetHandler(h Handler) 
        + Debug(msg string, ctx ...<font color=blue>interface</font>{}) 
        + Info(msg string, ctx ...<font color=blue>interface</font>{}) 
        + Warn(msg string, ctx ...<font color=blue>interface</font>{}) 
        + Error(msg string, ctx ...<font color=blue>interface</font>{}) 
        + Crit(msg string, ctx ...<font color=blue>interface</font>{}) 

    }
    class Lvl << (S,Aquamarine) >> {
        + String() string

    }
    class Record << (S,Aquamarine) >> {
        + Time time.Time
        + Lvl Lvl
        + Msg string
        + Ctx []<font color=blue>interface</font>{}
        + Call stack.Call
        + KeyNames RecordKeyNames

    }
    class RecordKeyNames << (S,Aquamarine) >> {
        + Time string
        + Msg string
        + Lvl string

    }
    class closingHandler << (S,Aquamarine) >> {
        + Close() error

    }
    class formatFunc << (S,Aquamarine) >> {
        + Format(r *Record) []byte

    }
    class funcHandler << (S,Aquamarine) >> {
        + Log(r *Record) error

    }
    class log15.Ctx << (T, #FF7700) >>  {
    }
    class log15.Lvl << (T, #FF7700) >>  {
    }
    class log15.formatFunc << (T, #FF7700) >>  {
    }
    class log15.funcHandler << (T, #FF7700) >>  {
    }
    class logger << (S,Aquamarine) >> {
        - ctx []<font color=blue>interface</font>{}
        - h *swapHandler

        - write(msg string, lvl Lvl, ctx []<font color=blue>interface</font>{}) 

        + New(ctx ...<font color=blue>interface</font>{}) Logger
        + Debug(msg string, ctx ...<font color=blue>interface</font>{}) 
        + Info(msg string, ctx ...<font color=blue>interface</font>{}) 
        + Warn(msg string, ctx ...<font color=blue>interface</font>{}) 
        + Error(msg string, ctx ...<font color=blue>interface</font>{}) 
        + Crit(msg string, ctx ...<font color=blue>interface</font>{}) 
        + GetHandler() Handler
        + SetHandler(h Handler) 

    }
    class muster << (S,Aquamarine) >> {
        + FileHandler(path string, fmtr Format) Handler
        + NetHandler(network string, addr string, fmtr Format) Handler
        + SyslogHandler(priority syslog.Priority, tag string, fmtr Format) Handler
        + SyslogNetHandler(net string, addr string, priority syslog.Priority, tag string, fmtr Format) Handler

    }
    class swapHandler << (S,Aquamarine) >> {
        - handler unsafe.Pointer
        - handler atomic.Value

        + Log(r *Record) error
        + Get() Handler
        + Swap(newHandler Handler) 
        + Log(r *Record) error
        + Swap(newHandler Handler) 
        + Get() Handler

    }
}
"io.WriteCloser" *-- "log15.closingHandler"
"log15.Handler" *-- "log15.closingHandler"

"log15.Format" <|-- "log15.formatFunc"
"log15.Handler" <|-- "log15.funcHandler"
"log15.Logger" <|-- "log15.logger"
"log15.Handler" <|-- "log15.swapHandler"

namespace term {
    class Termios << (S,Aquamarine) >> {
        + Iflag uint32
        + Oflag uint32
        + Cflag uint32
        + Lflag uint32
        + Cc []uint8
        + Ispeed uint32
        + Ospeed uint32

    }
    class term.Termios << (T, #FF7700) >>  {
    }
    class "syscall.Termios" as syscallTermios {
        'This class was created so that we can correctly have an alias pointing to this name. Since it contains dots that can break namespaces
    }
}


"__builtin__.int" #.. "log15.Lvl"
"log15.<font color=blue>func</font>(*Record) []byte" #.. "log15.formatFunc"
"log15.<font color=blue>func</font>(*Record) error" #.. "log15.funcHandler"
"log15.<font color=blue>map</font>[string]<font color=blue>interface</font>{}" #.. "log15.Ctx"
"term.syscallTermios" #.. "term.Termios"
hide fields
hide methods
@enduml
